package mobile.utils;

import com.codeborne.selenide.SelenideElement;
import io.appium.java_client.AppiumBy;
import mobile.enums.BranchesCommon;
import mobile.enums.Contour;
import org.openqa.selenium.By;
import mobile.enums.ServerType;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class AppConfig {

    private static AppConfig instance;
    private final Properties config = new Properties();
    private ServerType serverType = ServerType.DEBUG; // default
    /**
     * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (Singleton pattern).
     * –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
     * –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ new AppConfig() - —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ getInstance().
     */
    private AppConfig() {
        loadConfig();
    }
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AppConfig (Singleton).
     *
     * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
     * - synchronized - –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ
     * - –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
     * - –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä
     *
     * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
     * AppConfig config = AppConfig.getInstance();
     * config.getAppPackage();
     */
    public static synchronized AppConfig getInstance() {
        if (instance == null) {
            instance = new AppConfig();
        }
        return instance;
    }

    //–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞.
    private void loadConfig() {
        try (InputStream is = getClass().getClassLoader().getResourceAsStream("config.properties")) {
            if (is == null) {
                throw new RuntimeException("config.properties not found in resources");
            }
            config.load(is);

            // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: System property -> ENV -> config.properties -> debug
            String serverName = System.getProperty("server",
                    System.getenv("SERVER") != null ? System.getenv("SERVER")
                            : config.getProperty("buildType", "debug"));

            try {
                serverType = ServerType.valueOf(serverName.trim().toUpperCase());
            } catch (Exception e) {
                serverType = ServerType.DEBUG;
            }
        } catch (IOException e) {
            throw new RuntimeException("Failed to load config.properties", e);
        }
    }

    //–ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    public String getAppPackage() {
        /*switch (serverType) {
            case ADAPTER:
                return config.getProperty("appPackageAdapter");
            case PROD:
                return config.getProperty("appPackageProd");
            default:
                return config.getProperty("appPackage");
        }*/
        //–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:
        String pkg;
        switch (serverType){
            case ADAPTER:
                pkg = config.getProperty("appPackageAdapter");
                break;
            case PROD:
                pkg = config.getProperty("appPackageProd");
                break;
            default:
                pkg = config.getProperty("appPackage");
        }
        System.out.println("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–∫–µ—Ç: " + pkg);
        return pkg;
    }

    public String getProperty(String key) {
        return config.getProperty(key);
    }

    public ServerType getServerType() {
        return serverType;
    }

    //–û—Ç–¥–∞–µ–º –ø–∞–∫–µ—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏: ru.rzd.pass.adapter.debug –∏ —Ç–¥
    public String getPathToElement(){
        return getAppPackage();
    }

    //–ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—É—Ä
    public Contour getAutoContour() {
        return serverType.getAutoContour();
    }

    //–ü–æ–ª—É—á–∞–µ–º –≤–µ—Ç–∫—É
    public BranchesCommon getAutoBranch() {
        return serverType.getAutoBranch();
    }
}